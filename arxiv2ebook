#!/bin/bash
# Requires perl
# Requires one of following: curl, wget, GET, w3m, lynx
# latexmk is desirable, but not necessary

# Ratio of the actual viewport
# Some useful information is available at http://goo.gl/7Yvbc
RATIO=1.3986 # `echo "800 / 572" | bc -l`

# Minimal width (mm) of the output document
# If formulas appear to be longer, 
# this value will be increased automatically
WIDTH=90

# Margins (mm)
MARGIN=2

# Maximum number of runs 
# Script reruns with increased dimensions if it founds overfulls, 
# but if sizes of blocks are relative to page's ones, it may cycle forever
# Usually two runs are enough to get rid of all horizontal overfulls
MAX_RUN_NUMBER=2

# Set USE_BREQN=1 to use package "breqn" to hyphen formulas
# This package cause problems in some cases
USE_BREQN=0

# One can derive the following list of classes by running
# find -iname "*.cls" | xargs grep -l {geometry} | cut -d "/" -f 3 | cut -d . -f 1 | sort | paste -s -d "|"
# Additions and fixes are welcome
CLASSES_WITH_GEOMETRY="achemso|active-conf|agecon|aiaa-tc|ajae|apecon|bookest|ebsthesis|ecca|ecv|elpres|erae|erdc|eskd|estcpmm|flacards|flashcards|gaceta|gmdocc|hpsdiss|icsv|IEEEconf|image-gallery|isodoc|itaxpf|jrurstud|kerntest|lps|macqassign|mentis|nih|oegatb|papertex|pbsheet|pocoec|postcards|powerdot|ppr-prv|recipecard|regstud|sageep|screenplay|sffms|umich-thesis|vxulicentiate|worlddev"
# Documentclass elsarticle incorporates geometry only if one of the options 1p, 3p or 5p is set

# Current number of runs
RUN_NUMBER=0

# Implement floating point arithmetic
# using various tools
calc(){
	if which bc; then
		CALC_LAST=`echo "$1" | bc -l`
	elif which awk; then
		CALC_LAST=`echo - | awk "{print $1}"`
	elif which perl; then
		CALC_LAST=`echo "print $1" | perl`
	elif which python; then
		CALC_LAST=`python -c "print $1"`
	elif which ruby; then
		CALC_LAST=`ruby -e "print $1"`
	else 
		echo "No calculator available: install bc, awk, perl, python or ruby"
		exit
	fi
	}
	
# Download sources using various tools
download(){
	URL=$1
	OUTPUT=$2
	
	echo "Downloading $URL to $OUTPUT"
	
	if which curl; then
		if curl -o $OUTPUT --compressed $URL 
		then
			echo "curl succeeded" > /dev/null
		else
			echo "Cannot download http://arxiv.org/e-print/$CODE"
			exit
		fi	
	else
		# Check if gunzip available
		if which gunzip; then
			echo "gunzip available" > /dev/null
		else
			echo "No gunzip available: install curl (preferred) or gunzip"
		fi
		
		# Download $URL using wget, GET, w3m or lynx
		if which wget; then
			USERAGENT="Wget"
			if wget -U"$USERAGENT" -O - $URL > $OUTPUT.gz
			then
				echo "wget succeeded" > /dev/null
			else
				echo "Cannot download $URL using wget"
				exit
			fi
		elif which GET; then
			if GET $URL > $OUTPUT.gz
			then
				echo "GET succeeded" > /dev/null
			else
				echo "Cannot download $URL using GET"
				exit
			fi			
		elif which w3m; then
			if w3m -dump_source $URL > $OUTPUT.gz
			then
				echo "w3m succeeded" > /dev/null
			else
				echo "Cannot download $URL using w3m"
				exit
			fi			
		elif which lynx; then
			if lynx -source $URL > $OUTPUT.gz
			then
				echo "lynx succeeded" > /dev/null
			else
				echo "Cannot download $URL using lynx"
				exit
			fi					
		else 
			echo "No downloader available: install curl (preferred), wget, GET, w3m or lynx"
			exit
		fi

		# Unpack sources
		gunzip -f $CODE.gz		
		
	fi
	}
 
latexmake_pdf(){
	if which latexmk; then
		if latexmk -dvi- -ps- -pdf  -bibtex- -silent "$1"; then
			LATEXMAKE_PDF=0
		else
			LATEXMAKE_PDF=1
		fi
	else
		COMMAND="pdflatex -interaction=batchmode "$1""
		if $COMMAND && $COMMAND && $COMMAND && $COMMAND; then
			LATEXMAKE_PDF=0
		else
			LATEXMAKE_PDF=1
		fi 
	fi
	}

latexmake_pdfps(){
	if which latexmk; then
		if latexmk -dvi- -ps- -pdfps -bibtex- "$1"; then
			LATEXMAKE_PDFPS=0
		else
			LATEXMAKE_PDFPS=1
		fi
	else
		TEXNAME=$1
		DVINAME="${TEXNAME%.*}.dvi"
		PSNAME="${TEXNAME%.*}.ps"

		COMMAND="latex -interaction=batchmode "$1""
		if $COMMAND && $COMMAND && $COMMAND && $COMMAND && dvips "$DVINAME" && ps2pdf "$PSNAME"; then
			LATEXMAKE_PDFPS=0
		else
			LATEXMAKE_PDFPS=1
		fi 
	fi
	}

compile(){
  TEXNAME=$1
  echo "Compiling $TEXNAME"
  
  # Strip comments
  perl -pi -e 's/(?<!\\)%.*/%/g' "$TEXNAME"
  
  # LaTeX 2.09 documents with no options
  # can be simply converted to LaTeX2e
  perl -pi -e "s/\\\documentstyle{/\\\documentclass{/g" "$TEXNAME"

	# Add (if not added already) geometry to preambule 
	if grep -q -E "\\documentclass(\[[^]]*\])?{($CLASSES_WITH_GEOMETRY)}|\\\usepackage(\[[^]]*\])?{[^}]*geometry[^}]*}|\\documentclass\[([^]]*)(1|3|5)p([^]]*)\]{elsarticle}" "$TEXNAME"
	then
		echo "geometry has been already included" > /dev/null
	else
		perl -pi -0 -e "s/\\\begin\{document\}/\\\setlength{\\\paperwidth}{210mm}\\\setlength{\\\paperheight}{297mm}\\\usepackage{geometry}\\\begin{document}/g" "$TEXNAME"
	fi

	# Long URLs often produce overfulls
	# If hyperref is used
	# then add (if not added already) breakurl to preambule 
	if grep -q -E "\\\usepackage(\[[^]]*\])?{[^}]*breakurl[^}]*}" "$TEXNAME" 
	then
		echo "breakurl has been already included" > /dev/null
	else
		if grep -q -E "\\\usepackage(\[[^]]*\])?{[^}]*hyperref[^}]*}" "$TEXNAME"; then 
			perl -pi -0 -e "s/\\\begin\{document\}/\\\usepackage{breakurl}\\\begin{document}/g" "$TEXNAME"
		else
			echo "hyperref is not used" > /dev/null
		fi
	fi
	
	# On narrow pages more and more floats occur unprocesses
	# Let us fix this with morefloats
	if grep -q -E "\\\usepackage(\[[^]]*\])?{[^}]*morefloats[^}]*}" "$TEXNAME" 
	then
		echo "morefloats has been already included" > /dev/null
	else
		perl -pi -0 -e "s/\\\begin\{document\}/\\\usepackage{morefloats}\\\begin{document}/g" "$TEXNAME"
	fi

	# Set up required page's geometry, 
	# use \sloppy to allow hyphenation without penalties,
	# suppress \twocolumn and set single line spacing
	calc "$WIDTH / $RATIO"
	HEIGHT=$CALC_LAST
	INSERTION="\\\geometry{margin=${MARGIN}mm, papersize={${WIDTH}mm,${HEIGHT}mm}, offset=0mm, twocolumn=false}
\\\sloppy
\\\def\\\twocolumn{}
\\\renewcommand{\\\twocolumn}[1][]{\\\onecolumn #1}
\\\def\\\twocolumngrid{}
\\\renewcommand{\\\baselinestretch}{1}
"
	# Insert parameters right before \begin{document}
	perl -pi -0 -e "s/\\\begin\{document\}/$INSERTION\\\begin{document}/g" "$TEXNAME"

	# Remove documentclass option "twocolumn"
	# For elsarticle replace "3p" or "5p" by "1p"
	perl -pi -0 -e "s/\\\documentclass\[([^]]*)(3|5)p([^]]*)\]{elsarticle}/\\\documentclass[\$1 1p \$3]{elsarticle}/g" "$TEXNAME"
	# For revtex4-1 replace "reprint" or "twocolumn" by "preprint"
	perl -pi -0 -e "s/\\\documentclass\[((?:[^]]*[^a-z])?)(reprint|twocolumn)([^]]*)\]{revtex4-1}/\\\documentclass[\$1 preprint \$3]{revtex4-1}/g" "$TEXNAME"
	# In other cases replace twocolumn by onecolumn
	perl -pi -0 -e "s/\\\documentclass\[([^]]*)twocolumn([^]]*)\]/\\\documentclass[\$1 onecolumn \$2]/g" "$TEXNAME"

	# For revtex4 add option floatfix
	perl -pi -0 -e "s/\\\documentclass{(revtex4(-1)?)}/\\\documentclass[floatfix]{\$1}/g" "$TEXNAME"
	perl -pi -0 -e "s/\\\documentclass\[([^]]*)\]{(revtex4(-1)?)}/\\\documentclass[\$1, floatfix]{\$2}/g" "$TEXNAME"

	if (( $USE_BREQN )); then
		# Add (if not added already) breqn to preambule 
		if grep -q -E "\\\usepackage(\[[^]]*\])?{[^}]*breqn[^}]*}" "$TEXNAME"
		then
			echo "breqn has been already included" > /dev/null
		else
			perl -pi -0 -e "s/\\\begin\{document\}/\\\usepackage{breqn}\\\begin{document}/g" "$TEXNAME"
		fi
		# Replace equation by dmath
		perl -pi -0 -e "s/\\\begin\{equation\}/\\\begin{dmath}/g" "$TEXNAME"
		perl -pi -0 -e "s/\\\end\{equation\}/\\\end{dmath}/g" "$TEXNAME"
		perl -pi -0 -e "s/\\\begin\{equation\*\}/\\\begin{dmath*}/g" "$TEXNAME"
		perl -pi -0 -e "s/\\\end\{equation\*\}/\\\end{dmath*}/g" "$TEXNAME"
	fi

	# Depending on graphics format 
	# try to compile in PDF directly 
	latexmake_pdf $TEXNAME
	if [ $LATEXMAKE_PDF -eq 0 ]
	then
	  echo "direct compilation to pdf succeeded" > /dev/null
	# or through intermediate PS
	else
		latexmake_pdfps $TEXNAME
	fi

	# Increase number of runs
	RUN_NUMBER=$(($RUN_NUMBER + 1))
	# If we can run once more
	if [ "$RUN_NUMBER" -lt "$MAX_RUN_NUMBER" ]
	then
		# Parse logs to check possible overfulls
		parselog $TEXNAME
	fi
}

parselog(){
	TEXNAME=$1
	LOGNAME="${TEXNAME%.*}.log"

	# If horizontal overfulls exist
	if grep -q Overfull "$LOGNAME"
	then 
		# Select the longest overfull
		ADDTOWIDTH=`grep Overfull "$LOGNAME" | cut -d "(" -f 2 | cut -d p -f 1 | sort -nr | head -n 1`
		# Calculate new width 
		calc "$WIDTH + $ADDTOWIDTH / 72 * 25.4"
		WIDTH=$CALC_LAST
		# And re-run compile()
		compile $TEXNAME
		return
	fi

	# If vertical overfulls exist
	if grep -q "Float too large" "$LOGNAME"
	then 
		# Select the longest overfull
		ADDTOHEIGHT=`grep "Float too large" *.log | cut -d " " -f 9 | cut -d p -f 1 | sort -nr | head -n 1`
		# Calculate new width 
		calc "$WIDTH + $ADDTOHEIGHT * $RATIO / 72 * 25.4"
		WIDTH=$CALC_LAST
		# And re-run compile()
		compile $TEXNAME
		return
	fi
}

CODE=$1
OUTPUTDIR=`pwd`
TMPDIR=`mktemp -d`
cd $TMPDIR

# Old papers have identifiers like math/0410522,
# so we must get basename
OUTPUTFILE=`basename $CODE`

# Download sources
download "http://arxiv.org/e-print/$CODE" "$OUTPUTFILE"

# Some people does not provide sources of their papers
if file $OUTPUTFILE | grep -q "PDF document"
then
	echo "No sources available!"
	exit 
fi

# Some sources are HTML 
# We can do nothing with them
if file $OUTPUTFILE | grep -q "HTML document"
then
	echo "Sources are HTML"
	exit 
fi

# If sources consist of several files 
# they are tarred. Untar them
for i in `file * | grep "POSIX tar archive" | cut -d : -f 1`; do
	tar -xf $i
done

# If there is a single file then simply compile it
if [ `ls -1A | wc -l` = 1 ]; then
	# Rename source from $CODE to $CODE.tex
	mv * $CODE.tex
	compile *
# If there are multiple files 
# then select LaTeX documents and compile them
else
	for i in `find -iname "*.tex" | xargs grep -E -l "(\\\documentclass|\\\documentstyle)[[{]"`; do 
		compile $i
		PDFNAME="${i%.*}.pdf"
		cp $PDFNAME $OUTPUTDIR
	done
fi

rm -rf $TMPDIR
